{
  "timestamp": "2025-01-25T03:18:31.071363",
  "issue_number": "8",
  "system_prompt": "You are a helpful AI assistant that generates code based on GitHub issues. \n        Your task is to:\n        1. Analyze the issue description and comments\n        2. Generate or modify the requested files\n        3. Include necessary imports and documentation\n        4. Return complete, working code files\n        \n        IMPORTANT: For each file, you must format your response exactly like this:\n        ```language:full/path/to/file\n        [file contents here]\n        ```\n        \n        For example:\n        ```yaml:.github/workflows/example.yml\n        name: Example Workflow\n        on: push\n        ```\n        \n        ```python:.github/scripts/example.py\n        import os\n        def main():\n            pass\n        ```\n        \n        Do not include any explanations or markdown formatting outside the code blocks.",
  "user_prompt": "Generate or modify the following files based on this issue:\n\nHere are the files that need to be created or modified:\n\nExisting file .github/workflows/combined_ct_images_to_text.yml:\n```\nname: MorphoSource Analysis Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      morphosource_tag:\n        description: 'MorphoSource update tag to analyze (e.g. morphosource-updates-2025-01-23_14-39-38)'\n        required: false\n        type: string\n      force_rerun:\n        description: 'Force rerun even if analysis exists'\n        required: false\n        type: boolean\n        default: false\n  workflow_run:\n    workflows: [\"Parse MorphoSource Data\"]\n    types: [completed]\n\njobs:\n  check_and_analyze:\n    runs-on: ubuntu-22.04\n    outputs:\n      is_morphosource: ${{ steps.check_morpho.outputs.is_morphosource }}\n      has_analysis: ${{ steps.check_existing.outputs.has_analysis }}\n      release_body: ${{ steps.fetch_release.outputs.release_body }}\n      release_tag: ${{ steps.fetch_release.outputs.release_tag }}\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n\n      - name: Check for running workflows\n        id: check_runs\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          # Get current workflow ID from workflow name\n          workflow_id=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/actions/workflows\" | \\\n            jq -r '.workflows[] | select(.name==\"MorphoSource Analysis Workflow\") | .id')\n          \n          echo \"Current workflow ID: $workflow_id\"\n          \n          # Get running/queued workflows excluding the current run\n          running_workflows=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs?status=in_progress&per_page=100\" | \\\n            jq -r \".workflow_runs | length\")\n            \n          queued_workflows=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs?status=queued&per_page=100\" | \\\n            jq -r \".workflow_runs | length\")\n          \n          total_workflows=$((running_workflows + queued_workflows))\n          echo \"Found $running_workflows running and $queued_workflows queued workflows\"\n          \n          # Only proceed if this is the only workflow (count of 1 includes this run)\n          if [ \"$total_workflows\" -le 1 ]; then\n            echo \"No other workflows running or queued, proceeding\"\n          else\n            echo \"Other workflows are already running or queued, skipping\"\n            exit 1\n          fi\n\n      - name: Fetch Latest MorphoSource Release\n        id: fetch_release\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          if [ ! -z \"${{ inputs.morphosource_tag }}\" ]; then\n            echo \"Using provided morphosource tag: ${{ inputs.morphosource_tag }}\"\n            # Fetch specific release\n            curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n              \"https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ inputs.morphosource_tag }}\" > release.json\n            \n            # Check if release exists and format output\n            if [ \"$(cat release.json | jq -r '.message')\" = \"Not Found\" ]; then\n              echo \"Specified release tag not found\"\n              echo \"release_tag=\" >> \"$GITHUB_OUTPUT\"\n              echo \"release_body=\" >> \"$GITHUB_OUTPUT\"\n              echo \"morphosource_created_at=\" >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"release_body<<EOF\" >> \"$GITHUB_OUTPUT\"\n              cat release.json | jq -r .body >> \"$GITHUB_OUTPUT\"\n              echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n              \n              echo \"release_tag=${{ inputs.morphosource_tag }}\" >> \"$GITHUB_OUTPUT\"\n              echo \"morphosource_created_at=$(cat release.json | jq -r .created_at)\" >> \"$GITHUB_OUTPUT\"\n            fi\n            exit 0\n          fi\n          \n          echo \"Fetching releases to find latest morphosource-updates...\"\n          curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=10\" > releases.json\n          \n          # Use Python to find the latest morphosource-updates release\n          python3 -c 'import json; f=open(\"releases.json\", \"r\"); releases=json.load(f); f.close(); morpho_releases=[r for r in releases if r[\"tag_name\"].startswith(\"morphosource-updates-\")]; result={\"found\": True, \"tag_name\": morpho_releases[0][\"tag_name\"], \"body\": morpho_releases[0][\"body\"], \"created_at\": morpho_releases[0][\"created_at\"]} if morpho_releases else {\"found\": False}; f=open(\"release_info.json\", \"w\"); json.dump(result, f, indent=2); f.close()'\n          \n          if [ \"$(cat release_info.json | jq -r .found)\" = \"true\" ]; then\n              tag_name=$(cat release_info.json | jq -r .tag_name)\n              echo \"Found morphosource release: $tag_name\"\n              \n              echo \"release_body<<EOF\" >> \"$GITHUB_OUTPUT\"\n              cat release_info.json | jq -r .body >> \"$GITHUB_OUTPUT\"\n              echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n              \n              echo \"release_tag=$tag_name\" >> \"$GITHUB_OUTPUT\"\n              echo \"morphosource_created_at=$(cat release_info.json | jq -r .created_at)\" >> \"$GITHUB_OUTPUT\"\n          else\n              echo \"No morphosource-updates release found\"\n              echo \"release_tag=\" >> \"$GITHUB_OUTPUT\"\n              echo \"release_body=\" >> \"$GITHUB_OUTPUT\"\n              echo \"morphosource_created_at=\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Check if morphosource-updates\n        id: check_morpho\n        run: |\n          TAG_NAME=\"${{ steps.fetch_release.outputs.release_tag }}\"\n          if [[ -z \"$TAG_NAME\" ]]; then\n            echo \"is_morphosource=false\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"is_morphosource=true\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Check for existing analysis\n        id: check_existing\n        if: steps.check_morpho.outputs.is_morphosource == 'true'\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          if [ \"${{ inputs.force_rerun }}\" = \"true\" ]; then\n            echo \"Force rerun requested, skipping existing analysis check\"\n            echo \"has_analysis=false\" >> \"$GITHUB_OUTPUT\"\n            exit 0\n          fi\n          \n          releases=$(curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=100\")\n          \n          morphosource_date=\"${{ steps.fetch_release.outputs.morphosource_created_at }}\"\n          \n          # Check for any ct_image_analysis or ct_slice_analysis releases created after this morphosource release\n          existing_analysis=$(echo \"$releases\" | jq -r '.[] | \n            select(.tag_name | startswith(\"ct_image_analysis-\") or startswith(\"ct_slice_analysis-\")) | \n            select(.created_at > \"'$morphosource_date'\") | \n            .tag_name')\n          \n          if [ ! -z \"$existing_analysis\" ]; then\n            echo \"Found existing analysis: $existing_analysis\"\n            echo \"has_analysis=true\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"No existing analysis found\"\n            echo \"has_analysis=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  url_check:\n    needs: check_and_analyze\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true'\n    runs-on: ubuntu-22.04\n    outputs:\n      has_media_error: ${{ steps.url_check.outputs.has_media_error }}\n      has_server_error: ${{ steps.url_check.outputs.has_server_error }}\n      has_mesh: ${{ steps.type_check.outputs.has_mesh }}\n      has_volumetric_images: ${{ steps.type_check.outputs.has_volumetric_images }}\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        \n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n          \n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install selenium webdriver-manager\n          \n      - name: Install Chrome\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y wget gnupg2 unzip\n          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb\n\n      - name: Create Release Body File\n        run: |\n          echo \"${{ needs.check_and_analyze.outputs.release_body }}\" > release_body.txt\n          \n      - name: Create Screenshots Directory\n        run: mkdir -p screenshots\n\n      - name: Run URL check\n        id: url_check\n        run: |\n          python .github/scripts/url_screenshot_check.py release_body.txt || true\n          \n          if [ -f \"url_check_status.json\" ]; then\n            status=$(cat url_check_status.json | jq -r .status)\n            if [ \"$status\" = \"media_error\" ]; then\n              echo \"has_media_error=true\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            elif [ \"$status\" = \"server_error\" ]; then\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=true\" >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            fi\n          else\n            echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Upload URL Check Screenshots\n        if: always()\n        uses: actions/upload-artifact@v4\n        with:\n          name: url-check-screenshots\n          path: |\n            screenshots/*.png\n          retention-days: 90\n\n      - name: Run 2D/3D Type Check\n        id: type_check\n        run: |\n          python .github/scripts/2D3D_check.py release_body.txt || true\n          if [ -f \"url_check_status.json\" ]; then\n            has_mesh=$(cat url_check_status.json | jq -r .has_mesh)\n            has_volumetric=$(cat url_check_status.json | jq -r .has_volumetric_images)\n            echo \"has_mesh=$has_mesh\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_volumetric_images=$has_volumetric\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"has_mesh=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_volumetric_images=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  process_3d:\n    needs: [check_and_analyze, url_check]\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true' &&\n      needs.url_check.outputs.has_media_error != 'true' &&\n      needs.url_check.outputs.has_server_error != 'true' &&\n      needs.url_check.outputs.has_mesh == 'true'\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb\n          pip install --upgrade pip\n          pip install --upgrade openai selenium pillow webdriver-manager urllib3\n\n      - name: Start Xvfb\n        run: |\n          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &\n          echo \"DISPLAY=:99\" >> $GITHUB_ENV\n\n      - name: Generate Timestamp\n        id: gen_ts\n        run: |\n          TS=$(date +'%Y-%m-%d_%H-%M-%S')\n          echo \"timestamp=$TS\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Process CT Images\n        id: process_images\n        env:\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n          PYTHONUNBUFFERED: 1\n        run: |\n          echo \"${{ needs.check_and_analyze.outputs.release_body }}\" > release_body.txt\n          mkdir -p screenshots\n          \n          timeout 30m python3 .github/scripts/ct_image_to_text.py release_body.txt screenshots 2>&1 | tee process.log\n          \n          if [ ! -f screenshots/*.png ]; then\n            echo \"No screenshots were generated. Check process.log for details.\"\n            cat process.log\n            exit 1\n          fi\n          \n          echo \"description<<EOF\" >> \"$GITHUB_OUTPUT\"\n          cat process.log | grep -v \"DEBUG\" | grep -v \"INFO\" | grep -v \"WARNING\" >> \"$GITHUB_OUTPUT\"\n          echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          tag_name: \"ct_image_analysis-${{ steps.gen_ts.outputs.timestamp }}\"\n          release_name: \"CT Image Analysis #${{ steps.gen_ts.outputs.timestamp }}\"\n          body: |\n            Analysis for MorphoSource release: ${{ needs.check_and_analyze.outputs.release_tag }}\n            \n            ${{ steps.process_images.outputs.description }}\n            \n            ### Orientation Views\n            The following orientation views were captured:\n            - Default (Y+ Up)\n            - Upside Down (Y- Up)\n            - Forward 90\u00b0 (Z- Up)\n            - Back 90\u00b0 (Z+ Up)\n            \n            See attached images for details.\n          draft: false\n          prerelease: false\n\n      - name: Upload Default Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Default_Yplus_Up.png\n          asset_name: Default_Yplus_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Upside Down Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Upside_Down_Y-_Up.png\n          asset_name: Upside_Down_Y-_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Forward Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Forward_90_Z-_Up.png\n          asset_name: Forward_90_Z-_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Back Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Back_90_Zplus_Up.png\n          asset_name: Back_90_Zplus_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Log File\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./process.log\n          asset_name: process.log\n          asset_content_type: text/plain\n\n      - name: Upload Screenshots\n        if: success()\n        uses: actions/upload-artifact@v4\n        with:\n          name: ct-scan-screenshots\n          path: screenshots/*.png\n          retention-days: 90\n\n  process_2d:\n    needs: [check_and_analyze, url_check]\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true' &&\n      needs.url_check.outputs.has_media_error != 'true' &&\n      needs.url_check.outputs.has_server_error != 'true' &&\n      needs.url_check.outputs.has_volumetric_images == 'true'\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        \n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n          \n      - name: Install dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb\n          pip install --upgrade pip\n          pip install --upgrade openai selenium pillow webdriver-manager urllib3 requests\n\n      - name: Start Xvfb\n        run: |\n          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &\n          echo \"DISPLAY=:99\" >> $GITHUB_ENV\n\n      - name: Create screenshots directory\n        run: mkdir -p screenshots\n\n      - name: Generate Timestamp\n        id: gen_ts\n        run: |\n          TS=$(date +'%Y-%m-%d_%H-%M-%S')\n          echo \"timestamp=$TS\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Process CT Slices\n        id: process_slices\n        env:\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n          PYTHONUNBUFFERED: 1\n        run: |\n          echo \"${{ needs.check_and_analyze.outputs.release_body }}\" > release_body.txt\n          timeout 30m python3 .github/scripts/ct_slices_to_text.py release_body.txt screenshots 2>&1 | tee process.log\n          \n          if [ ! -f screenshots/*.png ]; then\n            echo \"No screenshots were generated. Check process.log for details.\"\n            cat process.log\n            exit 1\n          fi\n          \n          echo \"description<<EOF\" >> \"$GITHUB_OUTPUT\"\n          cat process.log | grep -v \"DEBUG\" | grep -v \"INFO\" | grep -v \"WARNING\" >> \"$GITHUB_OUTPUT\"\n          echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Create Slice Analysis Release\n        if: success()\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          tag_name: \"ct_slice_analysis-${{ steps.gen_ts.outputs.timestamp }}\"\n          release_name: \"CT Slice Analysis #${{ steps.gen_ts.outputs.timestamp }}\"\n          body: |\n            Analysis for MorphoSource release: ${{ needs.check_and_analyze.outputs.release_tag }}\n            \n            ${{ steps.process_slices.outputs.description }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Screenshots\n        if: success()\n        uses: actions/upload-artifact@v4\n        with:\n          name: morphosource_2d_screenshots\n          path: |\n            screenshots/*.png\n            !screenshots/error_*.png\n            \n  handle_errors:\n    needs: [check_and_analyze, url_check, process_3d, process_2d]\n    if: |\n      always() && \n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      (failure() || \n       needs.url_check.outputs.has_media_error == 'true' || \n       needs.url_check.outputs.has_server_error == 'true')\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check for Existing Error Release\n        id: check_error\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          # Get the morphosource release tag\n          MS_TAG=\"${{ needs.check_and_analyze.outputs.release_tag }}\"\n          \n          # Check for existing error releases for this morphosource release\n          response=$(curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=100\")\n          \n          has_error=$(echo \"$response\" | jq -r \"\n            [.[] | \n            select(\n              (.tag_name | startswith(\\\"ct_analysis_error-\\\")) and\n              (.body | contains(\\\"$MS_TAG\\\"))\n            )] | length\")\n            \n          if [ \"$has_error\" -gt \"0\" ]; then\n            echo \"Error release already exists for $MS_TAG\"\n            echo \"skip=true\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"No existing error release found for $MS_TAG\"\n            echo \"skip=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Create Error Release\n        if: steps.check_error.outputs.skip != 'true'\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          tag_name: \"ct_analysis_error-${{ github.run_id }}\"\n          release_name: \"CT Analysis Error #${{ github.run_id }}\"\n          body: |\n            Error occurred during analysis of MorphoSource release: ${{ needs.check_and_analyze.outputs.release_tag }}\n            \n            Status:\n            - Media Error: ${{ needs.url_check.outputs.has_media_error }}\n            - Server Error: ${{ needs.url_check.outputs.has_server_error }}\n            - 3D Process: ${{ needs.process_3d.result }}\n            - 2D Process: ${{ needs.process_2d.result }}\n\n      - name: Upload Error Screenshots\n        if: steps.check_error.outputs.skip != 'true'\n        uses: actions/upload-artifact@v4\n        with:\n          name: error_screenshots\n          path: |\n            error_*.png\n            screenshots/error_*.png\n            process.log\n            \n      - name: Set Error Status\n        if: steps.check_error.outputs.skip != 'true'\n        run: |\n          if [ \"${{ needs.url_check.outputs.has_media_error }}\" == \"true\" ]; then\n            echo \"Media error occurred - marking as completed to prevent loops\"\n            exit 0\n          fi\n          \n          if [ \"${{ needs.url_check.outputs.has_server_error }}\" == \"true\" ]; then\n            echo \"Server error occurred - marking as completed to prevent loops\"\n            exit 0\n          fi\n          \n          if [ \"${{ needs.process_3d.result }}\" == \"success\" ] || [ \"${{ needs.process_2d.result }}\" == \"success\" ]; then\n            echo \"Analysis completed successfully\"\n            exit 0\n          else\n            echo \"Analysis failed\"\n            exit 0\n          fi\n\n```\n\n\nIssue details:\nIssue Title: Handle Process 2D/3D for failures\n\nIssue Description:\nNeed to create Re-run-MAW.yml which detects error releases which have been missed.\n\nThe current edge case is:\n\nParse Morphosource --> gets new URL --> M.A.W. runs repeatedly on the same URL (Record 1) until it can process 2d or 3D\n\nHOWEVER, if a new record (Record 2) is found by Parse Morphosource --> URL --> M.A.W. will no longer ever run Process2D or Process3D on that missed record\n\n[CT Analysis Error #12680882257](https://github.com/johntrue15/NOCTURN-X-ray-repo/releases/tag/ct_analysis_error-12680882257) [Latest](https://github.com/johntrue15/NOCTURN-X-ray-repo/releases/latest)\n\n```plaintext\nError occurred during analysis of MorphoSource release: morphosource-updates-2025-01-08_23-14-05\n\nStatus:\n\nMedia Error: true\nServer Error: false\n3D Process: skipped\n2D Process: skipped\n```\n\nThe new .yml would check for Error Releases --> Check if they have a matching Process 2D or Process 3D Release  --->\n\n\n--> If Yes, then delete error release and log the length in time and media file size; between the error release and the final correct processing of the data. (This case scenario would be where Record 1 is repeatedly tried but there were no new uploads)\n\n--> If No, then re-run M.A.W. with the missed URL, log the length in time and media file size; between the error release and the final correct processing of the data. (This case scenario would be where Record 1 is missed because a new Record 2 is found.)\n\nThe new re-run-MAW.yml should run on completion of a new release from Parse Morphosource and determine which records have been missed, then apply MAW+URL.yml individually.\n\n\nMorphosource Analysis workflow (MAW)\n\nComment by johntrue15:\nCode Needed:\n.github/workflows/combined_ct_images_to_text.yml\n\nComment by johntrue15:\nMAW currently runs successfully and publishes a release with a workflow dispatch using the \"morphosource-updates-2025-01-14_23-27-15\" input and a force run. The new error_check_release.yml should first generate an output list of missed process2D and process3D for testing before we upgrade it to run fully automated.\n\n",
  "claude_response": "Based on your requirements, I'll create a new workflow file that checks for error releases and handles missed records. Here's the implementation:\n\n```yaml:.github/workflows/error_check_release.yml\nname: Check Error Releases\n\non:\n  workflow_dispatch:\n    inputs:\n      dry_run:\n        description: 'Only check for missed records without processing'\n        type: boolean\n        default: true\n  workflow_run:\n    workflows: [\"Parse MorphoSource Data\"]\n    types: [completed]\n\njobs:\n  analyze_errors:\n    runs-on: ubuntu-22.04\n    outputs:\n      missed_records: ${{ steps.find_missed.outputs.missed_records }}\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Find Missed Records\n        id: find_missed\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          # Get all releases\n          releases=$(curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=100\")\n          \n          # Create a temporary file to store missed records\n          echo \"[]\" > missed_records.json\n          \n          # Use Python to analyze releases and find missed records\n          python3 - <<EOF\n          import json\n          import re\n          from datetime import datetime\n          \n          def parse_morphosource_tag(body):\n              match = re.search(r'morphosource-updates-\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}-\\d{2}', body)\n              return match.group(0) if match else None\n          \n          with open('missed_records.json', 'r') as f:\n              missed_records = json.load(f)\n          \n          releases = json.loads('''$releases''')\n          \n          error_releases = [r for r in releases if r['tag_name'].startswith('ct_analysis_error-')]\n          success_releases = [r for r in releases if r['tag_name'].startswith(('ct_image_analysis-', 'ct_slice_analysis-'))]\n          \n          for error in error_releases:\n              morpho_tag = parse_morphosource_tag(error['body'])\n              if not morpho_tag:\n                  continue\n                  \n              # Check if there's a successful analysis for this morphosource tag\n              has_success = any(\n                  parse_morphosource_tag(s['body']) == morpho_tag \n                  for s in success_releases\n              )\n              \n              if not has_success:\n                  error_time = datetime.strptime(error['created_at'], '%Y-%m-%dT%H:%M:%SZ')\n                  record = {\n                      'morphosource_tag': morpho_tag,\n                      'error_release_tag': error['tag_name'],\n                      'error_created_at': error['created_at'],\n                      'days_since_error': (datetime.utcnow() - error_time).days\n                  }\n                  missed_records.append(record)\n          \n          # Sort by creation date\n          missed_records.sort(key=lambda x: x['error_created_at'])\n          \n          with open('missed_records.json', 'w') as f:\n              json.dump(missed_records, f, indent=2)\n          \n          # Create summary for output\n          summary = [f\"{r['morphosource_tag']} (Error: {r['error_release_tag']})\" for r in missed_records]\n          print(f\"Found {len(missed_records)} missed records:\")\n          for s in summary:\n              print(f\"- {s}\")\n          EOF\n          \n          # Set output for later jobs\n          echo \"missed_records<<EOF\" >> $GITHUB_OUTPUT\n          cat missed_records.json >> $GITHUB_OUTPUT\n          echo \"EOF\" >> $GITHUB_OUTPUT\n          \n          # Display results\n          echo \"Detailed missed records:\"\n          cat missed_records.json\n\n      - name: Upload Missed Records Report\n        uses: actions/upload-artifact@v4\n        with:\n          name: missed-records-report\n          path: missed_records.json\n          retention-days: 30\n\n  process_missed:\n    needs: analyze_errors\n    if: |\n      needs.analyze_errors.outputs.missed_records != '[]' &&\n      inputs.dry_run != true\n    strategy:\n      matrix:\n        record: ${{ fromJson(needs.analyze_errors.outputs.missed_records) }}\n      max-parallel: 1\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Process Record\n        uses: benc-uk/workflow-dispatch@v1\n        with:\n          workflow: MorphoSource Analysis Workflow\n          token: ${{ secrets.MY_GITHUB_TOKEN }}\n          inputs: |\n            {\n              \"morphosource_tag\": \"${{ matrix.record.morphosource_tag }}\",\n              \"force_rerun\": true\n            }\n\n      - name: Wait for Completion\n        run: sleep 30\n\n  cleanup_errors:\n    needs: [analyze_errors, process_missed]\n    if: always()\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check Results\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n          MISSED_RECORDS: ${{ needs.analyze_errors.outputs.missed_records }}\n        run: |\n          if [ \"${{ inputs.dry_run }}\" == \"true\" ]; then\n            echo \"Dry run completed. Found $(echo '$MISSED_RECORDS' | jq length) missed records.\"\n            exit 0\n          fi\n          \n          if [ \"${{ needs.process_missed.result }}\" == \"success\" ]; then\n            echo \"Successfully processed missed records\"\n          else\n            echo \"Failed to process some missed records\"\n            exit 1\n          fi\n```\n\nThis new workflow will:\n\n1. Run either manually (with dry_run option) or automatically after Parse MorphoSource Data\n2. Analyze all releases to find error releases without corresponding successful analysis\n3. Generate a report of missed records with timing information\n4. If not in dry-run mode, trigger MAW for each missed record sequentially\n5. Track the results and provide status information\n\nThe workflow can be tested in dry-run mode first to verify it correctly identifies missed records before enabling automatic processing.\n\nTo use it:\n1. Run manually with dry_run=true to see what would be processed\n2. Review the missed-records-report artifact\n3. If the results look correct, run again with dry_run=false to process the missed records\n\nThe workflow will maintain proper timing information and ensure no records are permanently missed due to new uploads."
}