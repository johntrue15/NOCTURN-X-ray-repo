{
  "timestamp": "2025-01-24T15:57:48.943486",
  "issue_number": "20",
  "system_prompt": "You are a helpful AI assistant that generates code based on GitHub issues. \n        Your task is to:\n        1. Analyze the issue description and comments\n        2. Generate or modify the requested files\n        3. Include necessary imports and documentation\n        4. Return complete, working code files\n        \n        IMPORTANT: For each file, you must format your response exactly like this:\n        ```language:full/path/to/file\n        [file contents here]\n        ```\n        \n        For example:\n        ```yaml:.github/workflows/example.yml\n        name: Example Workflow\n        on: push\n        ```\n        \n        ```python:.github/scripts/example.py\n        import os\n        def main():\n            pass\n        ```\n        \n        Do not include any explanations or markdown formatting outside the code blocks.",
  "user_prompt": "Generate or modify the following files based on this issue:\n\nHere are the files that need to be created or modified:\n\nExisting file .github/workflows/combined_ct_images_to_text.yml:\n```\nname: MorphoSource Analysis Workflow\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [\"Parse MorphoSource Data\"]\n    types: [completed]\n\njobs:\n  check_and_analyze:\n    runs-on: ubuntu-22.04\n    outputs:\n      is_morphosource: ${{ steps.check_morpho.outputs.is_morphosource }}\n      has_analysis: ${{ steps.check_existing.outputs.has_analysis }}\n      release_body: ${{ steps.fetch_release.outputs.release_body }}\n      release_tag: ${{ steps.fetch_release.outputs.release_tag }}\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n\n      - name: Check for running workflows\n        id: check_runs\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          # Get current workflow ID from workflow name\n          workflow_id=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/actions/workflows\" | \\\n            jq -r '.workflows[] | select(.name==\"MorphoSource Analysis Workflow\") | .id')\n          \n          echo \"Current workflow ID: $workflow_id\"\n          \n          # Get running/queued workflows excluding the current run\n          running_workflows=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs?status=in_progress&per_page=100\" | \\\n            jq -r \".workflow_runs | length\")\n            \n          queued_workflows=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs?status=queued&per_page=100\" | \\\n            jq -r \".workflow_runs | length\")\n          \n          total_workflows=$((running_workflows + queued_workflows))\n          echo \"Found $running_workflows running and $queued_workflows queued workflows\"\n          \n          # Only proceed if this is the only workflow (count of 1 includes this run)\n          if [ \"$total_workflows\" -le 1 ]; then\n            echo \"No other workflows running or queued, proceeding\"\n          else\n            echo \"Other workflows are already running or queued, skipping\"\n            exit 1\n          fi\n\n      - name: Fetch Latest MorphoSource Release\n        id: fetch_release\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          echo \"Fetching releases to find latest morphosource-updates...\"\n          curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=10\" > releases.json\n          \n          # Use Python to find the latest morphosource-updates release\n          python3 -c 'import json; f=open(\"releases.json\", \"r\"); releases=json.load(f); f.close(); morpho_releases=[r for r in releases if r[\"tag_name\"].startswith(\"morphosource-updates-\")]; result={\"found\": True, \"tag_name\": morpho_releases[0][\"tag_name\"], \"body\": morpho_releases[0][\"body\"], \"created_at\": morpho_releases[0][\"created_at\"]} if morpho_releases else {\"found\": False}; f=open(\"release_info.json\", \"w\"); json.dump(result, f, indent=2); f.close()'\n          \n          if [ \"$(cat release_info.json | jq -r .found)\" = \"true\" ]; then\n              tag_name=$(cat release_info.json | jq -r .tag_name)\n              echo \"Found morphosource release: $tag_name\"\n              \n              echo \"release_body<<EOF\" >> \"$GITHUB_OUTPUT\"\n              cat release_info.json | jq -r .body >> \"$GITHUB_OUTPUT\"\n              echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n              \n              echo \"release_tag=$tag_name\" >> \"$GITHUB_OUTPUT\"\n              echo \"morphosource_created_at=$(cat release_info.json | jq -r .created_at)\" >> \"$GITHUB_OUTPUT\"\n          else\n              echo \"No morphosource-updates release found\"\n              echo \"release_tag=\" >> \"$GITHUB_OUTPUT\"\n              echo \"release_body=\" >> \"$GITHUB_OUTPUT\"\n              echo \"morphosource_created_at=\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Check if morphosource-updates\n        id: check_morpho\n        run: |\n          TAG_NAME=\"${{ steps.fetch_release.outputs.release_tag }}\"\n          if [[ -z \"$TAG_NAME\" ]]; then\n            echo \"is_morphosource=false\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"is_morphosource=true\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Check for existing analysis\n        id: check_existing\n        if: steps.check_morpho.outputs.is_morphosource == 'true'\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          releases=$(curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=100\")\n          \n          morphosource_date=\"${{ steps.fetch_release.outputs.morphosource_created_at }}\"\n          \n          # Check for any ct_image_analysis or ct_slice_analysis releases created after this morphosource release\n          existing_analysis=$(echo \"$releases\" | jq -r '.[] | \n            select(.tag_name | startswith(\"ct_image_analysis-\") or startswith(\"ct_slice_analysis-\")) | \n            select(.created_at > \"'$morphosource_date'\") | \n            .tag_name')\n          \n          if [ ! -z \"$existing_analysis\" ]; then\n            echo \"Found existing analysis: $existing_analysis\"\n            echo \"has_analysis=true\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"No existing analysis found\"\n            echo \"has_analysis=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  url_check:\n    needs: check_and_analyze\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true'\n    runs-on: ubuntu-22.04\n    outputs:\n      has_media_error: ${{ steps.url_check.outputs.has_media_error }}\n      has_server_error: ${{ steps.url_check.outputs.has_server_error }}\n      has_mesh: ${{ steps.type_check.outputs.has_mesh }}\n      has_volumetric_images: ${{ steps.type_check.outputs.has_volumetric_images }}\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        \n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n          \n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install selenium webdriver-manager\n          \n      - name: Install Chrome\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y wget gnupg2 unzip\n          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb\n\n      - name: Create Release Body File\n        run: |\n          echo \"${{ needs.check_and_analyze.outputs.release_body }}\" > release_body.txt\n          \n      - name: Create Screenshots Directory\n        run: mkdir -p screenshots\n\n      - name: Run URL check\n        id: url_check\n        run: |\n          python .github/scripts/url_screenshot_check.py release_body.txt || true\n          \n          if [ -f \"url_check_status.json\" ]; then\n            status=$(cat url_check_status.json | jq -r .status)\n            if [ \"$status\" = \"media_error\" ]; then\n              echo \"has_media_error=true\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            elif [ \"$status\" = \"server_error\" ]; then\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=true\" >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            fi\n          else\n            echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Upload URL Check Screenshots\n        if: always()\n        uses: actions/upload-artifact@v4\n        with:\n          name: url-check-screenshots\n          path: |\n            screenshots/*.png\n          retention-days: 90\n\n      - name: Run 2D/3D Type Check\n        id: type_check\n        run: |\n          python .github/scripts/2D3D_check.py release_body.txt || true\n          if [ -f \"url_check_status.json\" ]; then\n            has_mesh=$(cat url_check_status.json | jq -r .has_mesh)\n            has_volumetric=$(cat url_check_status.json | jq -r .has_volumetric_images)\n            echo \"has_mesh=$has_mesh\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_volumetric_images=$has_volumetric\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"has_mesh=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_volumetric_images=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  process_3d:\n    needs: [check_and_analyze, url_check]\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true' &&\n      needs.url_check.outputs.has_media_error != 'true' &&\n      needs.url_check.outputs.has_server_error != 'true' &&\n      needs.url_check.outputs.has_mesh == 'true'\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb\n          pip install --upgrade pip\n          pip install --upgrade openai selenium pillow webdriver-manager urllib3\n\n      - name: Start Xvfb\n        run: |\n          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &\n          echo \"DISPLAY=:99\" >> $GITHUB_ENV\n\n      - name: Generate Timestamp\n        id: gen_ts\n        run: |\n          TS=$(date +'%Y-%m-%d_%H-%M-%S')\n          echo \"timestamp=$TS\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Process CT Images\n        id: process_images\n        env:\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n          PYTHONUNBUFFERED: 1\n        run: |\n          echo \"${{ needs.check_and_analyze.outputs.release_body }}\" > release_body.txt\n          mkdir -p screenshots\n          \n          timeout 30m python3 .github/scripts/ct_image_to_text.py release_body.txt screenshots 2>&1 | tee process.log\n          \n          if [ ! -f screenshots/*.png ]; then\n            echo \"No screenshots were generated. Check process.log for details.\"\n            cat process.log\n            exit 1\n          fi\n          \n          echo \"description<<EOF\" >> \"$GITHUB_OUTPUT\"\n          cat process.log | grep -v \"DEBUG\" | grep -v \"INFO\" | grep -v \"WARNING\" >> \"$GITHUB_OUTPUT\"\n          echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          tag_name: \"ct_image_analysis-${{ steps.gen_ts.outputs.timestamp }}\"\n          release_name: \"CT Image Analysis #${{ steps.gen_ts.outputs.timestamp }}\"\n          body: |\n            Analysis for MorphoSource release: ${{ needs.check_and_analyze.outputs.release_tag }}\n            \n            ${{ steps.process_images.outputs.description }}\n            \n            ### Orientation Views\n            The following orientation views were captured:\n            - Default (Y+ Up)\n            - Upside Down (Y- Up)\n            - Forward 90\u00b0 (Z- Up)\n            - Back 90\u00b0 (Z+ Up)\n            \n            See attached images for details.\n          draft: false\n          prerelease: false\n\n      - name: Upload Default Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Default_Yplus_Up.png\n          asset_name: Default_Yplus_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Upside Down Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Upside_Down_Y-_Up.png\n          asset_name: Upside_Down_Y-_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Forward Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Forward_90_Z-_Up.png\n          asset_name: Forward_90_Z-_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Back Orientation\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./screenshots/Back_90_Zplus_Up.png\n          asset_name: Back_90_Zplus_Up.png\n          asset_content_type: image/png\n\n      - name: Upload Log File\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./process.log\n          asset_name: process.log\n          asset_content_type: text/plain\n\n      - name: Upload Screenshots\n        if: success()\n        uses: actions/upload-artifact@v4\n        with:\n          name: ct-scan-screenshots\n          path: screenshots/*.png\n          retention-days: 90\n\n  process_2d:\n    needs: [check_and_analyze, url_check]\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true' &&\n      needs.url_check.outputs.has_media_error != 'true' &&\n      needs.url_check.outputs.has_server_error != 'true' &&\n      needs.url_check.outputs.has_volumetric_images == 'true'\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        \n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n          \n      - name: Install dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb\n          pip install --upgrade pip\n          pip install --upgrade openai selenium pillow webdriver-manager urllib3 requests\n\n      - name: Start Xvfb\n        run: |\n          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &\n          echo \"DISPLAY=:99\" >> $GITHUB_ENV\n\n      - name: Create screenshots directory\n        run: mkdir -p screenshots\n\n      - name: Generate Timestamp\n        id: gen_ts\n        run: |\n          TS=$(date +'%Y-%m-%d_%H-%M-%S')\n          echo \"timestamp=$TS\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Process CT Slices\n        id: process_slices\n        env:\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n          PYTHONUNBUFFERED: 1\n        run: |\n          echo \"${{ needs.check_and_analyze.outputs.release_body }}\" > release_body.txt\n          timeout 30m python3 .github/scripts/ct_slices_to_text.py release_body.txt screenshots 2>&1 | tee process.log\n          \n          if [ ! -f screenshots/*.png ]; then\n            echo \"No screenshots were generated. Check process.log for details.\"\n            cat process.log\n            exit 1\n          fi\n          \n          echo \"description<<EOF\" >> \"$GITHUB_OUTPUT\"\n          cat process.log | grep -v \"DEBUG\" | grep -v \"INFO\" | grep -v \"WARNING\" >> \"$GITHUB_OUTPUT\"\n          echo \"EOF\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Create Slice Analysis Release\n        if: success()\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          tag_name: \"ct_slice_analysis-${{ steps.gen_ts.outputs.timestamp }}\"\n          release_name: \"CT Slice Analysis #${{ steps.gen_ts.outputs.timestamp }}\"\n          body: |\n            Analysis for MorphoSource release: ${{ needs.check_and_analyze.outputs.release_tag }}\n            \n            ${{ steps.process_slices.outputs.description }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Screenshots\n        if: success()\n        uses: actions/upload-artifact@v4\n        with:\n          name: morphosource_2d_screenshots\n          path: |\n            screenshots/*.png\n            !screenshots/error_*.png\n            \n  handle_errors:\n    needs: [check_and_analyze, url_check, process_3d, process_2d]\n    if: |\n      always() && \n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      (failure() || \n       needs.url_check.outputs.has_media_error == 'true' || \n       needs.url_check.outputs.has_server_error == 'true')\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Check for Existing Error Release\n        id: check_error\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        run: |\n          # Get the morphosource release tag\n          MS_TAG=\"${{ needs.check_and_analyze.outputs.release_tag }}\"\n          \n          # Check for existing error releases for this morphosource release\n          response=$(curl -sSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases?per_page=100\")\n          \n          has_error=$(echo \"$response\" | jq -r \"\n            [.[] | \n            select(\n              (.tag_name | startswith(\\\"ct_analysis_error-\\\")) and\n              (.body | contains(\\\"$MS_TAG\\\"))\n            )] | length\")\n            \n          if [ \"$has_error\" -gt \"0\" ]; then\n            echo \"Error release already exists for $MS_TAG\"\n            echo \"skip=true\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"No existing error release found for $MS_TAG\"\n            echo \"skip=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n      - name: Create Error Release\n        if: steps.check_error.outputs.skip != 'true'\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}\n        with:\n          tag_name: \"ct_analysis_error-${{ github.run_id }}\"\n          release_name: \"CT Analysis Error #${{ github.run_id }}\"\n          body: |\n            Error occurred during analysis of MorphoSource release: ${{ needs.check_and_analyze.outputs.release_tag }}\n            \n            Status:\n            - Media Error: ${{ needs.url_check.outputs.has_media_error }}\n            - Server Error: ${{ needs.url_check.outputs.has_server_error }}\n            - 3D Process: ${{ needs.process_3d.result }}\n            - 2D Process: ${{ needs.process_2d.result }}\n\n      - name: Upload Error Screenshots\n        if: steps.check_error.outputs.skip != 'true'\n        uses: actions/upload-artifact@v4\n        with:\n          name: error_screenshots\n          path: |\n            error_*.png\n            screenshots/error_*.png\n            process.log\n            \n      - name: Set Error Status\n        if: steps.check_error.outputs.skip != 'true'\n        run: |\n          if [ \"${{ needs.url_check.outputs.has_media_error }}\" == \"true\" ]; then\n            echo \"Media error occurred - marking as completed to prevent loops\"\n            exit 0\n          fi\n          \n          if [ \"${{ needs.url_check.outputs.has_server_error }}\" == \"true\" ]; then\n            echo \"Server error occurred - marking as completed to prevent loops\"\n            exit 0\n          fi\n          \n          if [ \"${{ needs.process_3d.result }}\" == \"success\" ] || [ \"${{ needs.process_2d.result }}\" == \"success\" ]; then\n            echo \"Analysis completed successfully\"\n            exit 0\n          else\n            echo \"Analysis failed\"\n            exit 0\n          fi\n\n```\n\nExisting file .github/scripts/url_screenshot_check.py:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\nfrom selenium.common.exceptions import TimeoutException, NoSuchElementException\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport re\nimport sys\nimport os\nimport json\nimport time\nimport logging\nfrom datetime import datetime\n\n# Set up logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.StreamHandler(sys.stdout)\n    ]\n)\n\nclass MorphoSourceTemporarilyUnavailable(Exception):\n    \"\"\"Custom exception for when MorphoSource is temporarily unavailable\"\"\"\n    pass\n\ndef setup_driver():\n    chrome_options = Options()\n    chrome_options.add_argument('--headless=new')\n    chrome_options.add_argument('--no-sandbox')\n    chrome_options.add_argument('--disable-dev-shm-usage')\n    chrome_options.add_argument('--disable-gpu')\n    chrome_options.add_argument('--disable-software-rasterizer')\n    chrome_options.add_argument('--window-size=1920,1080')\n    \n    service = Service(ChromeDriverManager().install())\n    driver = webdriver.Chrome(service=service, options=chrome_options)\n    \n    driver.set_page_load_timeout(30)\n    driver.implicitly_wait(10)\n    \n    return driver\n\ndef extract_id_from_url(url):\n    match = re.search(r'(\\d+)$', url)\n    return match.group(1) if match else 'unknown'\n\ndef check_for_server_error(driver):\n    \"\"\"Check if the page shows the 500 error message\"\"\"\n    try:\n        title = driver.title\n        if \"MorphoSource temporarily unavailable (500)\" in title:\n            logging.warning(\"Detected MorphoSource 500 error page\")\n            return True\n        \n        # Also check the page source for the error message\n        if \"MorphoSource temporarily unavailable (500)\" in driver.page_source:\n            logging.warning(\"Detected MorphoSource 500 error in page source\")\n            return True\n            \n        return False\n    except Exception as e:\n        if \"MorphoSource temporarily unavailable (500)\" in str(e):\n            logging.warning(\"Detected MorphoSource 500 error in exception\")\n            return True\n        return False\n\ndef handle_media_error(url, driver):\n    \"\"\"Handle media error case and create status file\"\"\"\n    file_id = extract_id_from_url(url)\n    status_data = {\n        'status': 'media_error',\n        'url': url,\n        'file_id': file_id,\n        'timestamp': datetime.now().isoformat()\n    }\n    \n    # Save the error state screenshot\n    error_file = f\"{file_id}.png\"\n    try:\n        driver.save_screenshot(error_file)\n        logging.info(f\"Error state screenshot saved to {error_file}\")\n    except Exception as e:\n        logging.error(f\"Failed to save error screenshot: {str(e)}\")\n    \n    # Save status file\n    with open('url_check_status.json', 'w') as f:\n        json.dump(status_data, f, indent=2)\n    logging.info(\"Status file saved\")\n    \n    return True\n\ndef handle_server_error(url, driver=None):\n    \"\"\"Handle server error case and create status file\"\"\"\n    file_id = extract_id_from_url(url)\n    status_data = {\n        'status': 'server_error',\n        'url': url,\n        'file_id': file_id,\n        'timestamp': datetime.now().isoformat(),\n        'error': 'MorphoSource temporarily unavailable (500)'\n    }\n    \n    # Try to save error screenshot if driver is available\n    if driver:\n        error_file = f\"error_{file_id}_500.png\"\n        try:\n            driver.save_screenshot(error_file)\n            logging.info(f\"500 error screenshot saved as {error_file}\")\n        except Exception as e:\n            logging.error(f\"Failed to save 500 error screenshot: {str(e)}\")\n    \n    # Save status file\n    with open('url_check_status.json', 'w') as f:\n        json.dump(status_data, f, indent=2)\n    logging.info(\"Server error status file saved\")\n    \n    return False\n\ndef take_screenshot(url):\n    file_id = extract_id_from_url(url)\n    output_file = f\"{file_id}.png\"\n    error_file = f\"error_{file_id}.png\"\n    max_retries = 3\n    server_error_count = 0\n\n    for attempt in range(max_retries):\n        driver = None\n        try:\n            logging.info(f\"\\nAttempt {attempt + 1}/{max_retries} for ID {file_id}\")\n            logging.info(f\"Loading URL: {url}\")\n            \n            driver = setup_driver()\n            driver.get(url)\n            \n            # Check for 500 error first\n            if check_for_server_error(driver):\n                server_error_count += 1\n                if attempt == max_retries - 1:  # If this is the last attempt\n                    return handle_server_error(url, driver)\n                logging.warning(f\"Server error detected (attempt {attempt + 1}), waiting 5 seconds before retry...\")\n                time.sleep(5)\n                continue\n            \n            # Check for the not-ready message\n            try:\n                not_ready = driver.find_element(By.CSS_SELECTOR, 'div.not-ready')\n                if \"Media preview currently unavailable\" in not_ready.text:\n                    logging.info(\"morphosource media error\")\n                    print(\"morphosource media error\")\n                    return handle_media_error(url, driver)\n            except NoSuchElementException:\n                pass\n            \n            # If no errors, proceed with screenshot\n            wait = WebDriverWait(driver, 10)\n            uv_iframe = wait.until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"iframe#uv-iframe\"))\n            )\n\n            driver.switch_to.frame(uv_iframe)\n            \n            full_screen_btn = wait.until(\n                EC.element_to_be_clickable((By.CSS_SELECTOR, \"button.btn.imageBtn.fullScreen\"))\n            )\n            full_screen_btn.click()\n\n            logging.info(\"Taking screenshot...\")\n            driver.save_screenshot(output_file)\n            logging.info(f\"Screenshot saved to {output_file}\")\n            return True\n\n        except Exception as e:\n            logging.error(f\"Error on attempt {attempt + 1}: {str(e)}\")\n            if driver:\n                try:\n                    driver.save_screenshot(error_file)\n                    logging.info(f\"Error screenshot saved as {error_file}\")\n                except Exception as se:\n                    logging.error(f\"Failed to save error screenshot: {str(se)}\")\n        finally:\n            if driver:\n                try:\n                    driver.quit()\n                except Exception:\n                    pass\n\n    # If we got here and all attempts were server errors, handle it\n    if server_error_count == max_retries:\n        return handle_server_error(url)\n    \n    return False\n\ndef process_urls_from_file(input_file):\n    try:\n        with open(input_file, 'r') as f:\n            content = f.read().strip()\n\n        urls = re.findall(r'https://www\\.morphosource\\.org/concern/media/\\d+', content)\n\n        if not urls:\n            logging.error(\"No valid MorphoSource URLs found in file\")\n            return\n\n        logging.info(f\"Found {len(urls)} MorphoSource URLs in file\")\n        successful_screenshots = 0\n        server_errors = 0\n\n        for i, url in enumerate(urls, 1):\n            logging.info(f\"\\nProcessing URL {i}/{len(urls)}: {url}\")\n            result = take_screenshot(url)\n            \n            # Check if it was a server error\n            if os.path.exists('url_check_status.json'):\n                with open('url_check_status.json', 'r') as f:\n                    status = json.load(f)\n                    if status.get('status') == 'server_error':\n                        server_errors += 1\n                        continue\n            \n            if result:\n                successful_screenshots += 1\n\n        logging.info(f\"\\nScreenshot process complete\")\n        logging.info(f\"Successfully captured {successful_screenshots} out of {len(urls)} screenshots\")\n        if server_errors > 0:\n            logging.warning(f\"Encountered {server_errors} server errors\")\n\n        # Exit with success if all failures were server errors\n        failed_count = len(urls) - successful_screenshots\n        if failed_count > 0 and failed_count == server_errors:\n            logging.warning(\"All failures were due to server errors\")\n            sys.exit(0)\n            \n        # Otherwise exit with error if any screenshots failed\n        if successful_screenshots != len(urls):\n            sys.exit(1)\n\n    except Exception as e:\n        logging.error(f\"Error processing file: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        logging.error(\"Usage: python script.py <input_file>\")\n        sys.exit(1)\n\n    process_urls_from_file(sys.argv[1])\n\n```\n\n\nIssue details:\nIssue Title: No File Uploaded bug, need to modify check_url --> add no file uploaded error\n\nIssue Description:\nhttps://github.com/johntrue15/NOCTURN-X-ray-repo/actions/runs/12944964695\n\n<img width=\"814\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/225e1423-2de6-4730-8a15-2661816b3d73\" />\n\nComment by johntrue15:\n0s\n1m 3s\nRun echo \"A new increase in X-ray Computed Tomography records was found on MorphoSource.\n2025-0[1](https://github.com/johntrue15/NOCTURN-X-ray-repo/actions/runs/12944964695/job/36106827805#step:8:1)-24 07:14:09 - INFO - Starting CT slice analysis with:\n2025-01-24 07:14:09 - INFO - Release body file: release_body.txt\n2025-01-24 07:14:09 - INFO - Screenshots directory: screenshots\n2025-01-24 07:14:09 - INFO - Created screenshots directory\n2025-01-24 07:14:09 - INFO - Reading release body from: release_body.txt\n2025-01-24 07:14:09 - INFO - Successfully read release body file\n2025-01-24 07:14:09 - INFO - Found MorphoSource URL: https://www.morphosource.org/concern/media/000704150\n2025-01-24 07:14:09 - INFO - Starting CT slice capture\n2025-01-24 07:14:09 - INFO - Setting up Chrome options\n2025-01-24 07:14:09 - INFO - Initializing Chrome driver\n2025-01-24 07:14:40 - INFO - Navigating to URL: https://www.morphosource.org/concern/media/000704150\n2025-01-24 07:14:50 - INFO - Successfully loaded page\n2025-01-24 07:14:50 - INFO - Waiting for uv-iframe\n2025-01-24 07:15:10 - ERROR - Error during CT slice capture: Message: \nStacktrace:\n#0 0x561c831be7ca <unknown>\n#1 0x561c82cb62f0 <unknown>\n#2 0x561c82d06035 <unknown>\n#3 0x561c82d06251 <unknown>\n#4 0x561c82d4c054 <unknown>\n#5 0x561c82d2a9dd <unknown>\n#6 0x561c82d493b3 <unknown>\n#7 0x561c82d2a753 <unknown>\n#8 0x561c82cf7baa <unknown>\n#9 0x561c82cf8dfe <unknown>\n#10 0x561c83189[38](https://github.com/johntrue15/NOCTURN-X-ray-repo/actions/runs/12944964695/job/36106827805#step:8:39)b <unknown>\n#11 0x561c8318d307 <unknown>\n#12 0x561c83175e7c <unknown>\n#13 0x561c8318dec7 <unknown>\n#14 0x561c8315a24f <unknown>\n#15 0x561c831ad2f8 <unknown>\n#16 0x561c831ad4c0 <unknown>\n#17 0x561c831bd646 <unknown>\n#18 0x7fb0e1294ac3 <unknown>\n\n2025-01-24 07:15:11 - ERROR - Error processing CT slices: Message: \nStacktrace:\n#0 0x561c831be7ca <unknown>\n#1 0x561c82cb62f0 <unknown>\n#2 0x561c82d06035 <unknown>\n#3 0x561c82d06251 <unknown>\n#4 0x561c82d4c054 <unknown>\n#5 0x561c82d2a9dd <unknown>\n#6 0x561c82d493b3 <unknown>\n#7 0x561c82d2a753 <unknown>\n#8 0x561c82cf7baa <unknown>\n#9 0x561c82cf8dfe <unknown>\n#10 0x561c8318938b <unknown>\n#11 0x561c8318d307 <unknown>\n#12 0x561c83175e7c <unknown>\n#13 0x561c8318dec7 <unknown>\n#14 0x561c8315a24f <unknown>\n#15 0x561c831ad2f8 <unknown>\n#16 0x561c831ad4c0 <unknown>\n#17 0x561c831bd6[46](https://github.com/johntrue15/NOCTURN-X-ray-repo/actions/runs/12944964695/job/36106827805#step:8:47) <unknown>\n#18 0x7fb0e1294ac3 <unknown>\n\nComment by johntrue15:\nhttps://github.com/johntrue15/NOCTURN-X-ray-repo/releases/tag/ct_slice_analysis-2025-01-24_07-14-08\n\nRelease error\n\nComment by johntrue15:\nCode Needed: \n.github/workflows/combined_ct_images_to_text.yml\n.github/scripts/url_screenshot_check.py\n\nComment by johntrue15:\nNeed to modify this to have a new \"no file uploaded\" error\n\n          if [ -f \"url_check_status.json\" ]; then\n            status=$(cat url_check_status.json | jq -r .status)\n            if [ \"$status\" = \"media_error\" ]; then\n              echo \"has_media_error=true\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            elif [ \"$status\" = \"server_error\" ]; then\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=true\" >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            fi\n          else\n            echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n",
  "claude_response": "Here are the modified files to handle the \"no file uploaded\" error case:\n\n```yaml:.github/workflows/combined_ct_images_to_text.yml\nname: MorphoSource Analysis Workflow\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [\"Parse MorphoSource Data\"]\n    types: [completed]\n\njobs:\n\n  # ... (existing jobs) ...\n\n  url_check:\n    needs: check_and_analyze\n    if: |\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      needs.check_and_analyze.outputs.has_analysis != 'true'\n    runs-on: ubuntu-22.04\n    outputs:\n      has_media_error: ${{ steps.url_check.outputs.has_media_error }}\n      has_server_error: ${{ steps.url_check.outputs.has_server_error }}\n      has_no_file: ${{ steps.url_check.outputs.has_no_file }}\n      has_mesh: ${{ steps.type_check.outputs.has_mesh }}\n      has_volumetric_images: ${{ steps.type_check.outputs.has_volumetric_images }}\n    steps:\n      # ... (existing steps) ...\n      \n      - name: Run URL check\n        id: url_check\n        run: |\n          python .github/scripts/url_screenshot_check.py release_body.txt || true\n          \n          if [ -f \"url_check_status.json\" ]; then\n            status=$(cat url_check_status.json | jq -r .status)\n            if [ \"$status\" = \"media_error\" ]; then\n              echo \"has_media_error=true\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_no_file=false\" >> \"$GITHUB_OUTPUT\"\n            elif [ \"$status\" = \"server_error\" ]; then\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=true\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_no_file=false\" >> \"$GITHUB_OUTPUT\"\n            elif [ \"$status\" = \"no_file\" ]; then\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_no_file=true\" >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n              echo \"has_no_file=false\" >> \"$GITHUB_OUTPUT\"\n            fi\n          else\n            echo \"has_media_error=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_server_error=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"has_no_file=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n          \n      # ... (existing steps) ...\n      \n  # ... (existing jobs) ...\n        \n  handle_errors:\n    needs: [check_and_analyze, url_check, process_3d, process_2d]\n    if: |\n      always() &&\n      needs.check_and_analyze.outputs.is_morphosource == 'true' &&\n      (failure() ||\n       needs.url_check.outputs.has_media_error == 'true' ||\n       needs.url_check.outputs.has_server_error == 'true' ||\n       needs.url_check.outputs.has_no_file == 'true')\n    runs-on: ubuntu-22.04\n    steps:\n      # ... (existing steps) ...\n```\n\n```python:.github/scripts/url_screenshot_check.py\n# ... (existing imports) ...\n\nclass NoFileUploaded(Exception):\n    \"\"\"Custom exception for when no file is uploaded on MorphoSource\"\"\"\n    pass\n\n# ... (existing functions) ...\n\ndef handle_no_file_error(url, driver):\n    \"\"\"Handle no file uploaded case and create status file\"\"\"\n    file_id = extract_id_from_url(url)\n    status_data = {\n        'status': 'no_file',\n        'url': url,\n        'file_id': file_id,\n        'timestamp': datetime.now().isoformat()\n    }\n\n    # Save the error state screenshot\n    error_file = f\"error_{file_id}_no_file.png\"\n    try:\n        driver.save_screenshot(error_file)\n        logging.info(f\"No file error screenshot saved to {error_file}\")\n    except Exception as e:\n        logging.error(f\"Failed to save no file error screenshot: {str(e)}\")\n\n    # Save status file\n    with open('url_check_status.json', 'w') as f:\n        json.dump(status_data, f, indent=2)\n    logging.info(\"No file status file saved\")\n\n    return True\n\ndef take_screenshot(url):\n    file_id = extract_id_from_url(url)\n    output_file = f\"{file_id}.png\"\n    error_file = f\"error_{file_id}.png\"\n    max_retries = 3\n    server_error_count = 0\n\n    for attempt in range(max_retries):\n        driver = None\n        try:\n            logging.info(f\"\\nAttempt {attempt + 1}/{max_retries} for ID {file_id}\")\n            logging.info(f\"Loading URL: {url}\")\n\n            driver = setup_driver()\n            driver.get(url)\n\n            # Check for 500 error first\n            if check_for_server_error(driver):\n                server_error_count += 1\n                if attempt == max_retries - 1:  # If this is the last attempt\n                    return handle_server_error(url, driver)\n                logging.warning(f\"Server error detected (attempt {attempt + 1}), waiting 5 seconds before retry...\")\n                time.sleep(5)\n                continue\n\n            # Check for the not-ready message\n            try:\n                not_ready = driver.find_element(By.CSS_SELECTOR, 'div.not-ready')\n                if \"Media preview currently unavailable\" in not_ready.text:\n                    logging.info(\"Morphosource media error\")\n                    return handle_media_error(url, driver)\n                elif \"No file uploaded\" in not_ready.text:\n                    logging.info(\"No file uploaded on MorphoSource\")\n                    return handle_no_file_error(url, driver)\n            except NoSuchElementException:\n                pass\n\n            # If no errors, proceed with screenshot\n            wait = WebDriverWait(driver, 10)\n            uv_iframe = wait.until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"iframe#uv-iframe\"))\n            )\n\n            driver.switch_to.frame(uv_iframe)\n\n            full_screen_btn = wait.until(\n                EC.element_to_be_clickable((By.CSS_SELECTOR, \"button.btn.imageBtn.fullScreen\"))\n            )\n            full_screen_btn.click()\n\n            logging.info(\"Taking screenshot...\")\n            driver.save_screenshot(output_file)\n            logging.info(f\"Screenshot saved to {output_file}\")\n            return True\n\n        except Exception as e:\n            logging.error(f\"Error on attempt {attempt + 1}: {str(e)}\")\n            if driver:\n                try:\n                    driver.save_screenshot(error_file)\n                    logging.info(f\"Error screenshot saved as {error_file}\")\n                except Exception as se:\n                    logging.error(f\"Failed to save error screenshot: {str(se)}\")\n        finally:\n            if driver:\n                try:\n                    driver.quit()\n                except Exception:\n                    pass\n\n    # If we got here and all attempts were server errors, handle it\n    if server_error_count == max_retries:\n        return handle_server_error(url)\n\n    return False\n\n# ... (existing code) ...\n```\n\nThe changes made are:\n\n1. In the `combined_ct_images_to_text.yml` workflow file:\n   - Added a new output `has_no_file` to the `url_check` job to track the \"no file uploaded\" error case.\n   - Modified the `handle_errors` job condition to also run when `needs.url_check.outputs.has_no_file == 'true'`.\n\n2. In the `url_screenshot_check.py` script:\n   - Added a new `NoFileUploaded` exception class for the \"no file uploaded\" error case.\n   - Added a new `handle_no_file_error` function to handle the \"no file uploaded\" error case and create the corresponding status file.\n   - Modified the `take_screenshot` function to check for the \"No file uploaded\" message and call the `handle_no_file_error` function if detected.\n   - Modified the `url_check` step in the workflow to check for the `no_file` status in the `url_check_status.json` file and set the `has_no_file` output accordingly.\n\nWith these changes, the workflow will now detect and handle the \"no file uploaded\" error case, creating a separate error release and screenshots if needed."
}