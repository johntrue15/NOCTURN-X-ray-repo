name: Test Daily Check
on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  actions: read
  attestations: write

jobs:
  test-daily-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Set timestamps
      id: timestamps
      run: |
        TEST_TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        DAILY_TIMESTAMP=$(date -d '+1 minute' +'%Y-%m-%d_%H-%M-%S')  # Simulate next minute for daily
        echo "test_timestamp=$TEST_TIMESTAMP" >> $GITHUB_ENV
        echo "daily_timestamp=$DAILY_TIMESTAMP" >> $GITHUB_ENV
        echo "Test timestamp: $TEST_TIMESTAMP"
        echo "Daily timestamp: $DAILY_TIMESTAMP"

    - name: Find Latest Data Directory
      id: find-latest
      run: |
        # First try to find morphosource_data_complete.json
        LATEST_DIR=$(find data -maxdepth 2 -type f -name "morphosource_data_complete.json" -exec dirname {} \; | sort -r | head -n1 || echo "")
        if [ ! -z "$LATEST_DIR" ]; then
          echo "Found latest data directory: $LATEST_DIR with morphosource_data_complete.json"
          echo "dir=$LATEST_DIR" >> $GITHUB_OUTPUT
          echo "filename=morphosource_data_complete.json" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If not found, try updated_morphosource_data.json
        LATEST_DIR=$(find data -maxdepth 2 -type f -name "updated_morphosource_data.json" -exec dirname {} \; | sort -r | head -n1 || echo "")
        if [ ! -z "$LATEST_DIR" ]; then
          echo "Found latest data directory: $LATEST_DIR with updated_morphosource_data.json"
          echo "dir=$LATEST_DIR" >> $GITHUB_OUTPUT
          echo "filename=updated_morphosource_data.json" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "No data files found"
        exit 1

    - name: Create Test Data
      run: |
        mkdir -p "data/${{ env.test_timestamp }}"
        SOURCE_FILE="${{ steps.find-latest.outputs.dir }}/${{ steps.find-latest.outputs.filename }}"
        
        if [ ! -f "$SOURCE_FILE" ]; then
          echo "Source file not found: $SOURCE_FILE"
          exit 1
        fi
        
        echo "Using source file: $SOURCE_FILE"
        python .github/scripts/test_daily.py \
          --source-dir "${{ steps.find-latest.outputs.dir }}" \
          --output-dir "data/${{ env.test_timestamp }}" \
          --source-file "$SOURCE_FILE"
        
        # Rename the test data file
        mv "data/${{ env.test_timestamp }}/morphosource_data_complete.json" \
           "data/${{ env.test_timestamp }}/test_morphosource_data_complete.json"

    - name: Simulate Daily Collection
      run: |
        mkdir -p "data/${{ env.daily_timestamp }}"
        
        # Copy from test directory with the new name
        TEST_FILE="data/${{ env.test_timestamp }}/test_morphosource_data_complete.json"
        if [ ! -f "$TEST_FILE" ]; then
          echo "Test data file not found: $TEST_FILE"
          exit 1
        fi
        
        # Copy to daily directory with original name for testing
        cp "$TEST_FILE" "data/${{ env.daily_timestamp }}/morphosource_data_complete.json"

    - name: Run Daily Check
      id: daily-check
      env:
        LATEST_DATA_DIR: ${{ steps.find-latest.outputs.dir }}
        TEST_DATA_DIR: data/${{ env.test_timestamp }}
        DAILY_OUTPUT_DIR: data/${{ env.daily_timestamp }}
      run: |
        # No need to copy/rename files anymore
        python .github/scripts/daily.py \
          --data-dir "$DAILY_OUTPUT_DIR" \
          --output-dir "$DAILY_OUTPUT_DIR"
      continue-on-error: true

    - name: Create Release Notes
      if: always()
      run: |
        if [ "${{ steps.daily-check.outcome }}" == "success" ]; then
          echo "No new records found" > "data/${{ env.test_timestamp }}/release_notes.txt"
        fi

    - name: Generate Attestation for Test Dataset
      if: steps.daily-check.outcome == 'failure'
      uses: actions/attest@v2.1.0
      id: attest-test
      with:
        subject-path: data/${{ env.test_timestamp }}/test_morphosource_data_complete.json
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        show-summary: true
        predicate: |
          {
            "purl": "pkg:github/${{ github.repository }}",
            "version": "${{ github.sha }}",
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              },
              "test_info": {
                "type": "daily_test",
                "timestamp": "${{ env.test_timestamp }}"
              }
            }
          }

    - name: Save Attestation and Update Release Notes
      if: steps.daily-check.outcome == 'failure'
      run: |
        # Get attestation ID from URL in output
        ATT_URL="${{ steps.attest-test.outputs.attestation-url }}"
        ATT_ID=$(echo "$ATT_URL" | grep -o '[0-9]*$' || true)
        
        echo "Attestation URL: $ATT_URL"
        echo "Attestation ID: $ATT_ID"
        
        if [ -z "$ATT_ID" ]; then
          echo "Error: Could not extract attestation ID"
          exit 1
        fi
        
        # Fetch the attestation page and extract SHA256
        DIGEST=$(curl -s "$ATT_URL" | grep -A2 "Subjects" | grep "sha256:" | sed 's/.*sha256:\([a-f0-9]\{64\}\).*/\1/')
        echo "SHA256 Digest: $DIGEST"
        
        # Validate that we got a proper SHA256 (64 hex characters)
        if ! [[ $DIGEST =~ ^[a-f0-9]{64}$ ]]; then
          echo "Error: Invalid SHA256 digest format"
          exit 1
        fi
        
        # Update the release notes with attestation info
        echo -e "\n## Attestation\nTest Dataset: $ATT_URL" >> "data/${{ env.test_timestamp }}/release_notes.txt"

    - name: Commit and Push Changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Function to attempt commit and push with pull/rebase strategy
        push_changes() {
          local attempt=$1
          echo "Push attempt $attempt:"
          
          # Pull and rebase before pushing
          git pull --rebase origin main || return 1
          
          # Stage all new files
          git add "data/${{ env.test_timestamp }}/"
          git add "data/${{ env.daily_timestamp }}/"
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            return 0
          fi
          
          # Commit and push
          git commit -m "Test: Daily check data [${{ env.test_timestamp }}]" || return 1
          git push origin HEAD:main || return 1
          
          return 0
        }
        
        # Try multiple times with exponential backoff
        max_attempts=3
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if push_changes $attempt; then
            echo "Successfully pushed changes on attempt $attempt"
            exit 0
          fi
          
          echo "Push failed on attempt $attempt of $max_attempts"
          if [ $attempt -lt $max_attempts ]; then
            sleep_time=$((5 * attempt))
            echo "Waiting ${sleep_time} seconds before retry..."
            sleep $sleep_time
          fi
          
          attempt=$((attempt + 1))
        done
        
        echo "Failed to push changes after $max_attempts attempts"
        exit 1

    - name: Create Release
      if: always()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: "Test Daily Check #${{ env.test_timestamp }}"
        tag_name: "test-daily-${{ env.test_timestamp }}"
        body_path: data/${{ env.test_timestamp }}/release_notes.txt
        files: |
          data/${{ env.test_timestamp }}/test_morphosource_data_complete.json
          data/${{ env.test_timestamp }}/test_info.json
          data/${{ env.daily_timestamp }}/morphosource_data_complete.json

    - name: Upload Test Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-daily-logs-${{ env.test_timestamp }}
        path: |
          data/${{ env.test_timestamp }}/*
          data/${{ env.daily_timestamp }}/* 