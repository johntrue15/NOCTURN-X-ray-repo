name: CT to Text Analysis

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  analyze_ct:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      # -------------------------------------------------------
      # 1. Checkout repository
      # -------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v3

      # -------------------------------------------------------
      # 2. Setup Python
      # -------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      # -------------------------------------------------------
      # 3. Install Dependencies
      # -------------------------------------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      # -------------------------------------------------------
      # 4. Get latest release
      # -------------------------------------------------------
      - name: Fetch latest release
        id: fetch_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the latest release
          release=$(gh api -H "Accept: application/vnd.github+json" /repos/$GITHUB_REPOSITORY/releases/latest)
          
          # Extract and store release info
          echo "release_tag=$(echo $release | jq -r .tag_name)" >> "$GITHUB_OUTPUT"
          echo "release_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$release" | jq -r .body >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 5. Check if it's a morphosource release
      # -------------------------------------------------------
      - name: Check if morphosource release
        id: check_morpho
        run: |
          MS_TAG="${{ steps.fetch_release.outputs.release_tag }}"
          if [[ "$MS_TAG" =~ ^morphosource-updates-[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "Found MorphoSource release: $MS_TAG"
            echo "is_morphosource=true" >> "$GITHUB_OUTPUT"
            echo "ms_tag=$MS_TAG" >> "$GITHUB_OUTPUT"
          else
            echo "Not a MorphoSource release: $MS_TAG"
            echo "is_morphosource=false" >> "$GITHUB_OUTPUT"
          fi

      # -------------------------------------------------------
      # 6. Extract timestamp if morphosource
      # -------------------------------------------------------
      - name: Extract morphosource timestamp
        id: extract_ts
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        run: |
          MS_TAG="${{ steps.check_morpho.outputs.ms_tag }}"
          MS_TIME="${MS_TAG#morphosource-updates-}"
          # Clean the timestamp to match CT analysis format
          MS_TIME_CLEAN=$(echo "$MS_TIME" | sed 's/[-_]//g')
          echo "MS_TIME=$MS_TIME" >> "$GITHUB_ENV"
          echo "MS_TIME_CLEAN=$MS_TIME_CLEAN" >> "$GITHUB_ENV"
          echo "timestamp=$MS_TIME" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 7. Check for existing analysis
      # -------------------------------------------------------
      - name: Check for existing analysis
        id: check_analysis
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Log what we're checking for
          echo "Checking for analysis of MorphoSource release: ${{ steps.check_morpho.outputs.ms_tag }}"
          echo "Release timestamp: $MS_TIME"
          
          # Get all CT to Text releases
          echo "=== All CT to Text releases ==="
          gh api -H "Accept: application/vnd.github+json" /repos/$GITHUB_REPOSITORY/releases | \
          jq -r '.[] | select(.tag_name | startswith("ct_to_text_analysis-")) | { tag_name, created_at }'
          echo "=============================="
          
          echo "Cleaned morphosource timestamp: $MS_TIME_CLEAN"
          
          # Check for existing analyses after this timestamp
          response=$(gh api -H "Accept: application/vnd.github+json" /repos/$GITHUB_REPOSITORY/releases)
          
          # Debug each release's timestamp comparison
          echo "=== Timestamp Comparisons ==="
          echo "$response" | jq -r --arg ms_time "$MS_TIME_CLEAN" '
            .[] | 
            select(.tag_name | startswith("ct_to_text_analysis-")) |
            . as $release |
            {
              "tag": .tag_name,
              "timestamp": (.tag_name[21:] | gsub("[-_]"; "")),
              "morphosource_time": $ms_time,
              "is_after": ((.tag_name[21:] | gsub("[-_]"; "")) >= $ms_time)
            }'
          echo "=============================="
          
          # Count matching analyses with fixed comparison
          has_analysis=$(echo "$response" | jq -r --arg ms_time "$MS_TIME_CLEAN" '
            [.[] | 
            select(
              (.tag_name | startswith("ct_to_text_analysis-")) and
              ((.tag_name[21:] | gsub("[-_]"; "")) >= $ms_time)
            )] | length')
          
          echo "Number of matching analyses found: $has_analysis"
          
          # Debug: Show matching releases
          echo "=== Matching CT to Text releases ==="
          echo "$response" | jq -r --arg ms_time "$MS_TIME_CLEAN" '.[] | 
            select(
              (.tag_name | startswith("ct_to_text_analysis-")) and
              ((.tag_name[21:] | gsub("[-_]"; "")) >= $ms_time)
            ) | {
              tag_name, 
              created_at,
              "timestamp": (.tag_name[21:] | gsub("[-_]"; ""))
            }'
          echo "=============================="
          
          if [ "$has_analysis" -gt "0" ]; then
            echo "CT to Text analysis already exists for $MS_TAG"
            echo "has_analysis=true" >> "$GITHUB_OUTPUT"
          else
            echo "No existing CT to Text analysis found for $MS_TAG"
            echo "has_analysis=false" >> "$GITHUB_OUTPUT"
          fi

      # -------------------------------------------------------
      # 8. Check Blacklist
      # -------------------------------------------------------
      - name: Check Blacklist
        id: check_blacklist
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true'
        run: |
          # Write release body to temp file
          echo "${{ steps.fetch_release.outputs.release_body }}" > temp_release.txt
          
          # Debug: Show contents of blacklist file
          echo "=== Blacklist Contents ==="
          cat .github/blacklist.txt
          echo "=========================="
          
          # Debug: Show what we're searching for
          echo "=== Searching Release Body For ==="
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ $line =~ ^#.*$ || -z $line ]] && continue
            # Trim whitespace
            line=$(echo "$line" | sed -e 's/[[:space:]]*$//')
            echo "Looking for: '$line'"
          done < .github/blacklist.txt
          echo "=============================="
          
          # Check if any blacklisted data managers are in the release
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ $line =~ ^#.*$ || -z $line ]] && continue
            
            # Trim whitespace
            line=$(echo "$line" | sed -e 's/[[:space:]]*$//')
            echo "Checking for: '$line'"
            
            # Use grep with exact line matching and word boundaries
            if grep -F -x "$line" temp_release.txt; then
              echo "Blacklisted data manager found: $line"
              echo "is_blacklisted=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          done < .github/blacklist.txt
          
          # Debug: If no match found, show the release body
          echo "=== Release Body Contents ==="
          echo "First 10 lines of release body:"
          head -n 10 temp_release.txt
          echo "..."
          echo "Data Manager lines:"
          grep "Data Manager:" temp_release.txt
          echo "==========================="
          
          echo "No blacklisted data managers found"
          echo "is_blacklisted=false" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 9. Generate Timestamp
      # -------------------------------------------------------
      - name: Generate Timestamp
        id: gen_ts
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true' &&
          steps.check_blacklist.outputs.is_blacklisted != 'true'
        run: |
          # Example format: YYYY-MM-DD_HH-MM-SS
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 10. Run CT to Text
      # -------------------------------------------------------
      - name: Run CT to Text
        id: ct2text
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true' &&
          steps.check_blacklist.outputs.is_blacklisted != 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Write the release body to a file
          echo "${{ steps.fetch_release.outputs.release_body }}" > release_body.txt

          # Run your custom Python script
          python .github/scripts/ct_to_text.py release_body.txt > ct_output.txt

          # Export the script output (multi-line safe)
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat ct_output.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 11. Create or Update Release with AI Summary
      # -------------------------------------------------------
      - name: Create or Update Release with AI Summary
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true' &&
          steps.check_blacklist.outputs.is_blacklisted != 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        uses: actions/create-release@v1
        with:
          tag_name: "ct_to_text_analysis-${{ steps.gen_ts.outputs.timestamp }}"
          release_name: "CT to Text Analysis #${{ steps.gen_ts.outputs.timestamp }}"
          body: ${{ steps.ct2text.outputs.description }}
          draft: false
          prerelease: false

      # -------------------------------------------------------
      # 12. Log Blacklisted Release
      # -------------------------------------------------------
      - name: Log Blacklisted Release
        if: steps.check_blacklist.outputs.is_blacklisted == 'true'
        run: |
          echo "Release skipped due to blacklisted data manager"
          echo "Release tag: ${{ steps.fetch_release.outputs.release_tag }}"

      # -------------------------------------------------------
      # 13. Fallback step if not morphosource-updates
      # -------------------------------------------------------
      - name: No new morphosource release
        if: steps.check_morpho.outputs.is_morphosource == 'false'
        run: echo "No 'morphosource-updates-*' release found. Skipping CT-to-text analysis."