name: "Code Review and Analysis"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string
  workflow_run:
    workflows: ["Auto Code Generation with Claude on Issue"]
    types: [completed]
    branches-ignore: []  # Remove branch filter to catch all completions


permissions: write-all

jobs:
  analyze:
    # Only run if the triggering workflow succeeded and it's from the Claude workflow
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && 
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.name == 'Auto Code Generation with Claude on Issue')
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow name: ${{ github.event.workflow_run.name }}"
          echo "Workflow run head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Workflow run head sha: ${{ github.event.workflow_run.head_sha }}"
          echo "Workflow run head repo: ${{ github.event.workflow_run.head_repository.full_name }}"
          echo "Workflow run id: ${{ github.event.workflow_run.id }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"

      - name: Get workflow run info
        if: github.event_name == 'workflow_run'
        id: workflow-info
        uses: actions/github-script@v6
        with:
          script: |
            // Get the workflow run that triggered this workflow
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            // Get the branch name directly from the triggering workflow
            const branchName = run.data.head_branch;
            core.info(`Workflow run branch: ${branchName}`);
            
            // Extract issue number from branch name
            const match = branchName.match(/claude-pr\/issue-(\d+)/);
            if (match) {
              const issueNumber = match[1];
              core.info(`Found issue number ${issueNumber} from branch ${branchName}`);
              core.setOutput('issue_number', issueNumber);
              core.setOutput('head_branch', branchName);
            } else {
              // Try to get issue number from commit message
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: run.data.head_sha,
                per_page: 1
              });
              
              if (commits.data.length > 0) {
                const commitMessage = commits.data[0].commit.message;
                const msgMatch = commitMessage.match(/Generated code files for issue #(\d+)/);
                if (msgMatch) {
                  const issueNumber = msgMatch[1];
                  const issueBranch = `claude-pr/issue-${issueNumber}`;
                  core.info(`Found issue number ${issueNumber} from commit message`);
                  core.setOutput('issue_number', issueNumber);
                  core.setOutput('head_branch', issueBranch);
                } else {
                  core.setFailed(`Could not find issue number in commit message: ${commitMessage}`);
                }
              } else {
                core.setFailed(`Could not extract issue number from branch: ${branchName}`);
              }
            }

      - name: Set branch name
        id: set-branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ISSUE_NUM="${{ github.event.inputs.issue_number }}"
          else
            ISSUE_NUM="${{ steps.workflow-info.outputs.issue_number }}"
          fi
          
          BRANCH_NAME="claude-pr/issue-${ISSUE_NUM}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME for issue #$ISSUE_NUM"

      # First checkout issue branch to get repository structure
      - name: Checkout issue branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.set-branch.outputs.branch_name }}
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.WORKFLOW_PAT }}

      # Then checkout main branch files to a subdirectory
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          path: main-files
          token: ${{ secrets.WORKFLOW_PAT }}
          fetch-depth: 1

      # Create required directories if they don't exist
      - name: Create directories
        run: |
          mkdir -p .github/generated/workflows
          mkdir -p .github/generated/scripts
          mkdir -p staging/.github/workflows
          mkdir -p staging/.github/scripts
          
          echo "Directory structure:"
          ls -R .github/
          ls -R staging/

      # Verify branch and files
      - name: Verify setup
        run: |
          echo "Current branch:"
          git branch
          
          echo "Generated files location:"
          ls -la .github/generated/
          
          echo "Main files location:"
          ls -la main-files/.github/
          
          # Ensure we're on the correct branch
          if [ "$(git rev-parse --abbrev-ref HEAD)" != "${{ steps.set-branch.outputs.branch_name }}" ]; then
            echo "Switching to correct branch"
            git checkout ${{ steps.set-branch.outputs.branch_name }}
          fi

      # Set up Python and dependencies
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pathlib anthropic

      # Set up the directory structure
      - name: Setup directories
        run: |
          # Debug current state
          echo "Current workspace:"
          pwd
          ls -la
          
          echo "Main files location:"
          ls -la main-files/ || echo "main-files not found"
          
          # Create necessary directories
          mkdir -p .github/generated
          
          # Verify main files checkout
          if [ ! -d "main-files/.github/scripts" ]; then
            echo "Error: main-files scripts directory not found"
            echo "Contents of main-files:"
            find main-files -type f
            exit 1
          fi
          
          # Copy analyze_code.py from main to workspace root
          if [ -f "main-files/.github/scripts/analyze_code.py" ]; then
            cp main-files/.github/scripts/analyze_code.py ./analyze_code.py
            echo "Copied analyze_code.py to workspace root"
          else
            echo "Error: analyze_code.py not found in main-files"
            echo "Contents of main-files/.github/scripts:"
            ls -la main-files/.github/scripts/
            exit 1
          fi
          
          # Debug final structure
          echo "Final workspace structure:"
          find . -maxdepth 3 -type f
          
          echo "Contents of .github/generated:"
          ls -la .github/generated/

      # Run the analysis using analyze_code from main
      - name: Analyze code
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create log directory
          mkdir -p logs
          
          # Debug Python environment
          python --version
          pip list
          
          # Debug script location and permissions
          ls -l analyze_code.py
          
          # Run analyze_code.py with error handling
          if ! python analyze_code.py > logs/analyze.log 2>&1; then
            echo "::error::analyze_code.py failed - check logs for details"
            cat logs/analyze.log
            # Don't fail the workflow yet - continue to upload artifacts
          fi
          
          # Show log contents even on success
          if [ -f "logs/analyze.log" ]; then
            echo "Analysis log contents:"
            cat logs/analyze.log
          else
            echo "::error::No analysis log was created"
          fi

      # Upload all analysis artifacts
      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-artifacts
          path: |
            logs/
            staging/
          retention-days: 5

      # Commit the changes
      - name: Commit combined files
        env:
          WORKFLOW_PAT: ${{ secrets.WORKFLOW_PAT }}
        run: |
          # Debug git status
          echo "Current branch:"
          git branch
          echo "Remote URL:"
          git remote -v
          
          # Configure git
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${WORKFLOW_PAT}@github.com/${{ github.repository }}.git
          
          # Read metadata and move files
          if [ -f ".github/generated/metadata.json" ]; then
            echo "Reading metadata file..."
            cat .github/generated/metadata.json
            
            # Process each file from metadata
            while IFS= read -r file; do
              # Remove quotes and whitespace
              file=$(echo "$file" | tr -d '"' | tr -d ' ')
              if [ ! -z "$file" ]; then
                # Remove .github prefix if present for target path
                target_path=$(echo "$file" | sed 's|^\.github/||')
                
                # Check for files in the generated/.github directory
                if [ -f ".github/generated/.github/$file" ]; then
                  echo "Moving file from generated/.github: $file to .github/$target_path"
                  # Create target directory if it doesn't exist
                  mkdir -p ".github/$(dirname "$target_path")"
                  # Copy file to its final location
                  cp ".github/generated/.github/$file" ".github/$target_path"
                  # Add to git
                  git add ".github/$target_path"
                  echo "Moved and added: .github/$target_path"
                # Check for files directly in generated
                elif [ -f ".github/generated/$file" ]; then
                  echo "Moving file from generated: $file to .github/$target_path"
                  # Create target directory if it doesn't exist
                  mkdir -p ".github/$(dirname "$target_path")"
                  # Copy file to its final location
                  cp ".github/generated/$file" ".github/$target_path"
                  # Add to git
                  git add ".github/$target_path"
                  echo "Moved and added: .github/$target_path"
                else
                  echo "Warning: Could not find file: $file"
                fi
              fi
            done < <(jq -r '.generated_files[]' .github/generated/metadata.json)
          else
            echo "No metadata.json found"
            exit 1
          fi
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # List files that will be committed
          echo "Files to be committed:"
          git diff --cached --name-only
          
          # Create commit message
          commit_msg="Code review updates for issue #${{ steps.set-branch.outputs.issue_number }}"
          
          # Commit and push
          git commit -m "$commit_msg"
          git push origin HEAD:${{ steps.set-branch.outputs.branch_name }}

      - name: Add review comment
        if: github.event_name == 'workflow_run'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f ".github/generated/review_comment.md" ]; then
            gh pr comment ${{ github.event.workflow_run.pull_requests[0].number }} -F .github/generated/review_comment.md
          fi

      - name: Show review comment
        if: github.event_name == 'workflow_dispatch' 
        run: |
          if [ -f ".github/generated/review_comment.md" ]; then
            echo "Review comment contents:"
            cat ".github/generated/review_comment.md"
          else
            echo "No review comment generated"
          fi
